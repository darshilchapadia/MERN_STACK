{"version":3,"sources":["webpack:///./static/src/IssueList.jsx"],"names":["PAGE_SIZE","IssueRow","props","onDeleteClick","deleteIssue","issue","_id","substr","status","owner","created","toDateString","effort","completionDate","title","propTypes","object","isRequired","func","IssueTable","issueRows","issues","map","array","IssueList","Component","dataFetcher","urlBase","location","fetch","search","then","response","ok","json","error","Promise","reject","data","constructor","context","initialState","records","forEach","Date","state","toastVisible","toastMessage","toastType","createIssue","bind","setFilter","showError","dismissToast","message","setState","get","id","method","alert","loadData","query","router","push","pathname","componentDidMount","componentDidUpdate","prevProps","oldQuery","newQuery","effort_gte","effort_lte","console","log","catch","err","newIssue","headers","body","JSON","stringify","updatedIssue","newIssues","concat","render","contextTypes"],"mappings":"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","file":"0.2ea1672066d9e501e2de.hot-update.js","sourcesContent":["import React from 'react';\nimport 'isomorphic-fetch';\nimport PropTypes from 'prop-types';\nimport {Link, withRouter} from 'react-router';\nimport {Button, Glyphicon, Table, Panel, Pagination } from 'react-bootstrap';\n\nimport IssueAdd from './IssueAdd.jsx';\nimport IssueFilter from './IssueFilter.jsx';\nimport Toast from './Toast.jsx';\n\n\nconst PAGE_SIZE = 10;\n\nconst IssueRow = (props) => {\n  function onDeleteClick(){\n    props.deleteIssue(props.issue._id);\n  }\n  return (\n  <tr>\n    <td><Link to={`/issues/${props.issue._id}`}>{props.issue._id.substr(-4)}</Link></td>\n    <td>{props.issue.status}</td>\n    <td>{props.issue.owner}</td>\n    <td>{props.issue.created.toDateString()}</td>\n    <td>{props.issue.effort}</td>\n    <td>{props.issue.completionDate ? props.issue.completionDate.toDateString() : ''}</td>\n    <td>{props.issue.title}</td>\n    <td><Button bsSize=\"xsmall\" onClick={onDeleteClick}>\n      <Glyphicon glyph=\"trash\" /> </Button>\n    </td>\n  </tr>\n);\n};\n\n\nIssueRow.propTypes = {\n  issue: PropTypes.object.isRequired,\n  deleteIssue: PropTypes.func.isRequired,\n};\n\nfunction IssueTable (props){\n  const issueRows = props.issues.map(issue => <IssueRow key={issue._id} issue={issue} deleteIssue={props.deleteIssue}/>);\n\n  return (\n    <Table bordered condensed hover responsive>\n\n     <thead>\n      <tr>\n       <th>Id</th>\n       <th>Title</th>\n       <th>Owner</th>\n       <th>Created</th>\n       <th>Effort</th>\n       <th>Completion Date</th>\n       <th>Title</th>\n       <th></th>\n      </tr>\n    </thead>\n    <tbody>{issueRows}</tbody>\n  </Table>\n   );\n\n}\n\nIssueTable.propTypes = {\n  issues : PropTypes.array.isRequired,\n  deleteIssue : PropTypes.func.isRequired,\n};\n\n\n\nclass IssueList extends React.Component {\n\n  static dataFetcher({urlBase, location}){\n  return fetch(`${urlBase,'' }/api/issues${location.search}`)\n          .then(response =>{\n            if(!response.ok) return response.json(). then(error=>\n            Promise.reject(error));\n            return response.json().then(data=> ({IssueList: data}));\n          });\n  }\n\n  constructor(props, context) {\n    super(props, context);\n  //  const issues = context.initialState.data.records;\n  const issues = context.initialState && context.initialState.IssueList ? context.initialState.IssueList.records : [];\n\n    issues.forEach(issue=>{\n      issue.created = new Date(issue.created);\n      if(issue.completionDate){\n        issue.completionDate = new Date(issue.completionDate);\n      }\n    });\n    this.state = { issues, toastVisible: false,\n    toastMessage: '', toastType: 'success' };\n\n    this.createIssue = this.createIssue.bind(this);\n    this.setFilter = this.setFilter.bind(this);\n    this.deleteIssue = this.deleteIssue.bind(this);\n    this.showError = this.showError.bind(this);\n    this.dismissToast = this.dismissToast.bind(this);\n  }\n\n  showError(message){\n    this.setState({toastVisible: true, toastMessage: message,\n                  toastType: 'danger'});\n  }\n\n  dismissToast(){get\n    this.setState({toastVisible: false});\n  }\n\n  deleteIssue(id){\n    fetch(`/api/issues/${id}`,{method: 'DELETE'}).then(response =>{\n      if(!response.ok) alert('Failed to delete issue');\n      else this.loadData();\n    })\n  }\n\n  setFilter(query){\n    if(this.props.location.query !== query){\n      this.props.router.push({ pathname: this.props.location.pathname, query  });\n    }\n\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps) {\n    const oldQuery = prevProps.location.query;\n    const newQuery = this.props.location.query;\n\n    if (oldQuery === newQuery) {\n      return;\n    }\n\n    if(oldQuery.status == newQuery.status\n     && oldQuery.effort_gte === newQuery.effort_gte\n     && oldQuery.effort_lte === newQuery.effort_lte){\n      return;\n     }\n\n    this.loadData();\n  }\n\n  loadData() {\n    // fetch(`/api/issues${this.props.location.search}`).then(response => {\n    //   if (response.ok) {\n    //     response.json().then(data => {\n    //       data.records.forEach(issue => {\n    //         issue.created = new Date(issue.created);\n    //         if (issue.completionDate) {\n    //           issue.completionDate = new Date(issue.completionDate);\n    //         }\n    //       });\n    //       this.setState({ issues: data.records });\n    //     });\n    //   } else {\n    //     response.json().then(error => {\n    //       this.showError(`Failed to fetch issues ${error.message}`);\n    //     });\n    //   }\n    // }).catch(err => {\n    //   this.showError(`Error in fetching data from server: ${err}`);\n    // });\n\n    IssueList.dataFetcher({location: this.props.location}).then(data=>{\n      const issues = data.IssueList.records;\n      issues.forEach(issue=>{\n        issue.created = new Date(issue.created);\n        if(issue.completionDate){\n          issue.completionDate = new Date(issue.completionDate);\n        }\n      });\n      this.setState({issues});\n      console.log('satet:',  issues);\n    }).catch(err => {\n       this.showError(`Error in fetching data from server: ${err}`);\n     });\n\n  }\n\n  createIssue(newIssue) {\n    fetch('/api/issues', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(newIssue),\n    }).then(response => {\n      if (response.ok) {\n        response.json().then(updatedIssue => {\n          updatedIssue.created = new Date(updatedIssue.created);\n          if (updatedIssue.completionDate) {\n            updatedIssue.completionDate = new Date(updatedIssue.completionDate);\n          }\n          const newIssues = this.state.issues.concat(updatedIssue);\n          this.setState({ issues: newIssues });\n        });\n      } else {\n        response.json().then(error => {\n          this.showError(`Failed to add issue: ${error.message}`);\n        });\n      }\n    }).catch(err => {\n      this.showError(`Error in sending data to server: ${err.message}`);\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Panel collapsible header=\"Filter\">\n          <IssueFilter setFilter={this.setFilter}\n            initFilter={this.props.location.query}  />\n      </Panel>\n\n        <IssueTable issues={this.state.issues} deleteIssue={this.deleteIssue}/>\n\n        <IssueAdd createIssue={this.createIssue} />\n        <Toast showing={this.state.toastVisible} message={this.state.toastMessage}\n          onDismiss={this.dismissToast} bsStyle={this.state.toastType} />\n\n      </div>\n    );\n  }\n}\n\nIssueList.contextTypes = {\n  initialState: PropTypes.object,\n};\n\nIssueList.propTypes = {\n  location: PropTypes.object.isRequired,\n  router: PropTypes.object,\n};\n\nexport default IssueList;\n\n\n\n// WEBPACK FOOTER //\n// ./static/src/IssueList.jsx"],"sourceRoot":""}